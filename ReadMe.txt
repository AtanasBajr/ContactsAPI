When you download the project, change the Connection string to the database from the DBContext and from the appsettings.json 
After that run the next two commands: add-migration "RandomName" , update-database.
These commands should create the database.

The database consists of 4 tables.
1.ExpertiseLev
It should contain all the possible expertise levels  (for example: "begginner", "medium");
2.Skills
It should contain all the skills 

I created methods that will allow you to add records to those tables, but you will have to use a token with administrator role.
In order to create a token with that type of role you have a method (you will be able to access it from the swagger documentation),
you will need to invoke it with these parameters:

{
        "email":"admin@admin.com",
        "mobilenum":"+9999999"
}

3.Contacts
This table contains all the Contacts, the fields "email" and "mobileNum" are made to be unique because, we will use them in this demo in order to generate authentication tokens.

4.ContactSkillExpertise
This table contains all the information about which contact has which skill and what is the expertise level of the skill he has.

When you run the project, the default route will be to the swagger documentation.
In order to have access to the methods (except the methods for generating tokens ), you have Authorize button in the swagger documentation, there you need to add a bearer token. You need to add the token formatted like this:

Bearer rr34r43r4(token)...

Without using "" or :  .

In order to have access to my comments in the swagger documentation you need to go to the properties of the project, pick "Build" on the sidebar, go to the output section and make sure "XML documentation file" is selected and it's location is in the base directory that the assembly resolver uses (you can get the location it in the code by using "System.AppContext.BaseDirectory").

In the swagger documentation you have simple explanations about the methods there. I created a good amount of functions and It will be better if you can call me so that I can share my screen and explain the things I did.

Also In this project I have big amount of models that I use, which complicate my code  inside some of my methods ( I am doing that because the example values for the input's of the method's in the swagger documentation are generated by using these models  and I wanted to make the example values of the methods more precise).

If you are interested to learn more about the project, do not hesitate to write me an e-mail or call me .